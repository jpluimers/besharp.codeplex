using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using BeSharp.NumberVerification;
using BeSharp.Generic;

namespace NumberVerificationTestProject
{
    /// <summary>
    /// http://nl.wikipedia.org/wiki/Elfproef / http://en.wikipedia.org/wiki/Check_digit
    /// </summary>
    [TestClass]
    public class BankrekeningNummerVerificationUnitTest
    {
        readonly string[] invalidBankrekeningNummerTestNummers = 
        { 
            "5780076210", "8888950501", "2570126352", "6822313203", "4490777794", "4669658485", "6769091146", "5118605967", "1609038688", "7174960489", 
            "242993380", "838606001", "917005932", "918089953", "304195544", "284151115", "880107076", "140206447", "144116568", "705366179", 
            "abscdefghi", "abscdefgh",
            "959446150" // "959446150" generated by Testnummers.nl
        };
        readonly string[] validBankrekeningNummerTestNummers = 
        { 
            "5780076219", "8888950508", "2570126357", "6822313206", "4490777795", "4669658484", "6769091143", "5118605962", "1609038681", "7174960480", 
            "242993389", "838606008", "917005937", "918089956", "304195545", "284151114", "880107073", "140206442", "144116561", "705366170" ,
            ".2.4.2.9.9.3.3.8.9.", "8.3.8.6.0.6.0.0.8", ".9.1.7.0.0.5.9.3.7.", "918.089.956", "3041.9.5545", "28.41.5.11.14", "880.1.0.7.073", "14.02.06.442", "144.11.65.61", "70.536.61.70",
            "268121826", "551754125", // these two won't pass the first pass of Scramble
            "2.6.8.1.2.1.8.2.6", ".5.5.1.7.5.4.1.2.5."
        };

        readonly string[] becomesTenDigits = { "000000000", "000000001", "000000002", "000000003", "000000004", "000000005", "000000007", "000000008", "000000009" }; 
        readonly string[] cannotBecomeTenDigits = { "000000006", "095944615" }; 

        [TestMethod]
        public void Complete_becomesTenDigit_TestMethod()
        {
            BankrekeningNummerVerification verification = new BankrekeningNummerVerification();

            foreach (string becomesTenDigit in becomesTenDigits)
            {
                string tenDigit = verification.Complete(becomesTenDigit);
                bool valid = verification.IsValid(tenDigit);
                Assert.IsTrue(valid, "Completed {0} into {1}, but {1} was not valid", becomesTenDigit, tenDigit);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(Exception<BankrekeningNummerVerification>))]
        public void Complete_cannotBecomeTenDigits_TestMethod()
        {
            BankrekeningNummerVerification verification = new BankrekeningNummerVerification();

            Exception exception = null;
            foreach (string cannotBecomeTenDigit in cannotBecomeTenDigits)
            {
                try
                {
                    string tenDigit = verification.Complete(cannotBecomeTenDigit);
                    Assert.Inconclusive("It should not be possible that {0} completed into {1}", Reflector.GetNameSeparatorValue(new { cannotBecomeTenDigit }), Reflector.GetNameSeparatorValue(new { tenDigit }));
                }
                catch (Exception ex)
                {
                    exception = ex;
                    continue;
                }
            }
            throw exception;
        }

        [TestMethod]
        public void IsValid_TestMethod()
        {
            BankrekeningNummerVerification verification = new BankrekeningNummerVerification();

            foreach (string inValidBankrekeningNummerTestNummer in invalidBankrekeningNummerTestNummers)
            {
                bool result = verification.IsValid(inValidBankrekeningNummerTestNummer);
                bool expected = false;
                Assert.AreEqual(expected, result, "Expected BankrekeningNummerVerification.IsValid({0} to be {1}", inValidBankrekeningNummerTestNummer, expected);
            }

            foreach (string validBankrekeningNummerTestNummer in validBankrekeningNummerTestNummers)
            {
                bool result = verification.IsValid(validBankrekeningNummerTestNummer);
                bool expected = true;
                Assert.AreEqual(expected, result, "Expected BankrekeningNummerVerification.IsValid({0} to be {1}", validBankrekeningNummerTestNummer, expected);
            }
        }

        [TestMethod]
        public void Random_validLengths_TestMethod()
        {
            BankrekeningNummerVerification verification = new BankrekeningNummerVerification();
            runRandomManyTimesForAllLengths(verification, validateGeneratedNumber);
        }

        [TestMethod]
        [ExpectedException(typeof(Exception<BankrekeningNummerBSNVerificationBase>))]
        public void Random_invalidLength_TestMethod()
        {
            BankrekeningNummerVerification verification = new BankrekeningNummerVerification();
            string generatedBankrekeningNummer = verification.Random(100); // invalid length; should throw an exception
        }

        private static void validateGeneratedNumber(BankrekeningNummerVerification verification, string generatedBankrekeningNummer)
        {
            bool validBankrekeningNummer = verification.IsValid(generatedBankrekeningNummer);
            Assert.IsTrue(validBankrekeningNummer, "Generated {0} is invalid", Reflector.GetNameSeparatorValue(new { generatedBankrekeningNummer }));
        }

        [TestMethod]
        public void Scramble_TestMethod()
        {
            BankrekeningNummerVerification verification = new BankrekeningNummerVerification();

            foreach (string validBankrekeningNummerTestNummer in validBankrekeningNummerTestNummers)
            {
                scamble_TestMethod(verification, validBankrekeningNummerTestNummer);
            }
            runRandomManyTimesForAllLengths(verification, scamble_TestMethod);
        }

        private static void scamble_TestMethod(BankrekeningNummerVerification verification, string validBankrekeningNummerTestNummer)
        {
            string rot5 = verification.Scramble(validBankrekeningNummerTestNummer);
            {
                int result = rot5.Length;
                int expected = validBankrekeningNummerTestNummer.Length;
                Assert.AreEqual(expected, result, "Expected length {0} of BankrekeningNummerVerification.Rot5 to the same as the plain length {1}", result, expected);
            }
            foreach (char item in rot5)
            {
                bool result = char.IsNumber(item) || (item == '.');
                bool expected = true;
                Assert.AreEqual(expected, result, "Expected all characters returned by BankrekeningNummerVerification.Rot5 to be numeric or dot, but {0} isn't", item);
            }
        }

        private static void runRandomManyTimesForAllLengths(BankrekeningNummerVerification verification, Action<BankrekeningNummerVerification, string> action)
        {
            for (int i = 0; i < 1000; i++)
            {
                for (int length = BankrekeningNummerVerification.MinBankrekeningNummerLength; length < BankrekeningNummerVerification.MaxBankrekeningNummerLength; length++)
                {
                    string generatedBankrekeningNummer = verification.Random(length);
                    action(verification, generatedBankrekeningNummer);
                }
            }
        }

    }
}
