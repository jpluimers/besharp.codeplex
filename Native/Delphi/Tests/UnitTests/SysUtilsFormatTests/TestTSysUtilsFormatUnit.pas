unit TestTSysUtilsFormatUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, SysUtilsFormatUnit;

type
  // Test methods for class TSysUtilsFormat

  TestTSysUtilsFormat = class(TTestCase)
  strict private
    FSysUtilsFormat: TSysUtilsFormat;
    FFormatSettings: TFormatSettings;
    FLaagsteLeeftijd: Double;
    FLaagsteLeeftijdMan: Currency;
    FLaagsteLeeftijdVrouw: Currency;
    FHoogsteWaarde: Currency;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFormat;
    procedure TestFormat1;
    procedure TestFormatBuf;
    procedure TestFormatBuf1;
    procedure TestFormatBuf2;
    procedure TestFormatBuf3;
    procedure TestFormatBuf4;
    procedure TestFormatBuf5;
    procedure TestFormatCurr;
    procedure TestFormatCurr1;
    procedure TestFormatDateTime;
    procedure TestFormatDateTime1;
    procedure TestFormatFloat;
    procedure TestFormatFloat1;
  end;

implementation

procedure TestTSysUtilsFormat.SetUp;
begin
  FSysUtilsFormat := TSysUtilsFormat.Create;
  FFormatSettings := System.SysUtils.FormatSettings;
  FLaagsteLeeftijd := 25.5;
  FLaagsteLeeftijdMan := 25.5;
  FLaagsteLeeftijdVrouw := 27.5;
  FHoogsteWaarde := 1701223.2212;
end;

procedure TestTSysUtilsFormat.TearDown;
begin
  FSysUtilsFormat.Free;
  FSysUtilsFormat := nil;
end;

procedure TestTSysUtilsFormat.TestFormat;
var
  Expected: string;
  ReturnValue: string;
  Format: string;
begin
  // TODO: Setup method call parameters
  Format := '%.1f %.1f %.1f %15.0n';
  ReturnValue := FSysUtilsFormat.Format(Format, [FLaagsteLeeftijd, FLaagsteLeeftijdMan, FLaagsteLeeftijdVrouw, FHoogsteWaarde]);
  Expected := '25.5 25.5 27.5       1,701,223'; // actual '25.5 25.500 27.500   1,701,223.221'
  Self.CheckEqualsString(Expected, ReturnValue, 'Currency formatting mismatch');
end;

procedure TestTSysUtilsFormat.TestFormat1;
var
  ReturnValue: string;
  AFormatSettings: TFormatSettings;
//  Args: $3;
  Format: string;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FSysUtilsFormat.Format(Format, Args, AFormatSettings);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatBuf;
var
  ReturnValue: Cardinal;
//  Args: $5;
  FmtLen: Cardinal;
  Format: TObject;
  BufLen: Cardinal;
  Buffer: PWideChar;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FSysUtilsFormat.FormatBuf(Buffer, BufLen, Format, FmtLen, Args);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatBuf1;
var
  ReturnValue: Cardinal;
  AFormatSettings: TFormatSettings;
//  Args: $7;
  FmtLen: Cardinal;
  Format: TObject;
  BufLen: Cardinal;
  Buffer: PWideChar;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FSysUtilsFormat.FormatBuf(Buffer, BufLen, Format, FmtLen, Args,
//      AFormatSettings);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatBuf2;
var
  ReturnValue: Cardinal;
//  Args: $9;
  FmtLen: Cardinal;
  Format: TObject;
  BufLen: Cardinal;
  Buffer: TObject;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FSysUtilsFormat.FormatBuf(Buffer, BufLen, Format, FmtLen, Args);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatBuf3;
var
  ReturnValue: Cardinal;
  AFormatSettings: TFormatSettings;
//  Args: $11;
  FmtLen: Cardinal;
  Format: TObject;
  BufLen: Cardinal;
  Buffer: TObject;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FSysUtilsFormat.FormatBuf(Buffer, BufLen, Format, FmtLen, Args,
//      AFormatSettings);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatBuf4;
var
  ReturnValue: Cardinal;
//  Args: $13;
  FmtLen: Cardinal;
  Format: TObject;
  BufLen: Cardinal;
  Buffer: string;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FSysUtilsFormat.FormatBuf(Buffer, BufLen, Format, FmtLen, Args);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatBuf5;
var
  ReturnValue: Cardinal;
  AFormatSettings: TFormatSettings;
//  Args: $15;
  FmtLen: Cardinal;
  Format: TObject;
  BufLen: Cardinal;
  Buffer: string;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FSysUtilsFormat.FormatBuf(Buffer, BufLen, Format, FmtLen, Args,
//      AFormatSettings);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatCurr;
var
  ReturnValue: string;
  Value: Currency;
  Format: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSysUtilsFormat.FormatCurr(Format, Value);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatCurr1;
var
  ReturnValue: string;
  AFormatSettings: TFormatSettings;
  Value: Currency;
  Format: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSysUtilsFormat.FormatCurr(Format, Value, AFormatSettings);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatDateTime;
var
  ReturnValue: string;
  DateTime: TDateTime;
  Format: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSysUtilsFormat.FormatDateTime(Format, DateTime);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatDateTime1;
var
  ReturnValue: string;
  AFormatSettings: TFormatSettings;
  DateTime: TDateTime;
  Format: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSysUtilsFormat.FormatDateTime(Format, DateTime, AFormatSettings);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatFloat;
var
  ReturnValue: string;
  Value: Extended;
  Format: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSysUtilsFormat.FormatFloat(Format, Value);
  // TODO: Validate method results
end;

procedure TestTSysUtilsFormat.TestFormatFloat1;
var
  ReturnValue: string;
  AFormatSettings: TFormatSettings;
  Value: Extended;
  Format: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSysUtilsFormat.FormatFloat(Format, Value, AFormatSettings);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSysUtilsFormat.Suite);
end.

